/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package network;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class TBall implements TBase<TBall, TBall._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("TBall");

  private static final TField POSITIONS_FIELD_DESC = new TField("positions", TType.LIST, (short)1);
  private static final TField TYPE_FIELD_DESC = new TField("type", TType.I32, (short)2);
  private static final TField PLAYER_FIELD_DESC = new TField("player", TType.I32, (short)3);
  private static final TField IS_SHADOW_FIELD_DESC = new TField("isShadow", TType.BOOL, (short)4);

  public List<TPosition> positions;
  /**
   * 
   * @see TPowerUp
   */
  public TPowerUp type;
  /**
   * 
   * @see TPlayer
   */
  public TPlayer player;
  public boolean isShadow;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    POSITIONS((short)1, "positions"),
    /**
     * 
     * @see TPowerUp
     */
    TYPE((short)2, "type"),
    /**
     * 
     * @see TPlayer
     */
    PLAYER((short)3, "player"),
    IS_SHADOW((short)4, "isShadow");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // POSITIONS
          return POSITIONS;
        case 2: // TYPE
          return TYPE;
        case 3: // PLAYER
          return PLAYER;
        case 4: // IS_SHADOW
          return IS_SHADOW;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISSHADOW_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.POSITIONS, new FieldMetaData("positions", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, TPosition.class))));
    tmpMap.put(_Fields.TYPE, new FieldMetaData("type", TFieldRequirementType.DEFAULT, 
        new EnumMetaData(TType.ENUM, TPowerUp.class)));
    tmpMap.put(_Fields.PLAYER, new FieldMetaData("player", TFieldRequirementType.DEFAULT, 
        new EnumMetaData(TType.ENUM, TPlayer.class)));
    tmpMap.put(_Fields.IS_SHADOW, new FieldMetaData("isShadow", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(TBall.class, metaDataMap);
  }

  public TBall() {
  }

  public TBall(
    List<TPosition> positions,
    TPowerUp type,
    TPlayer player,
    boolean isShadow)
  {
    this();
    this.positions = positions;
    this.type = type;
    this.player = player;
    this.isShadow = isShadow;
    setIsShadowIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TBall(TBall other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetPositions()) {
      List<TPosition> __this__positions = new ArrayList<TPosition>();
      for (TPosition other_element : other.positions) {
        __this__positions.add(new TPosition(other_element));
      }
      this.positions = __this__positions;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetPlayer()) {
      this.player = other.player;
    }
    this.isShadow = other.isShadow;
  }

  public TBall deepCopy() {
    return new TBall(this);
  }

  @Override
  public void clear() {
    this.positions = null;
    this.type = null;
    this.player = null;
    setIsShadowIsSet(false);
    this.isShadow = false;
  }

  public int getPositionsSize() {
    return (this.positions == null) ? 0 : this.positions.size();
  }

  public java.util.Iterator<TPosition> getPositionsIterator() {
    return (this.positions == null) ? null : this.positions.iterator();
  }

  public void addToPositions(TPosition elem) {
    if (this.positions == null) {
      this.positions = new ArrayList<TPosition>();
    }
    this.positions.set(0, elem);
  }

  public List<TPosition> getPositions() {
    return this.positions;
  }

  public TBall setPositions(List<TPosition> positions) {
    this.positions = positions;
    return this;
  }

  public void unsetPositions() {
    this.positions = null;
  }

  /** Returns true if field positions is set (has been asigned a value) and false otherwise */
  public boolean isSetPositions() {
    return this.positions != null;
  }

  public void setPositionsIsSet(boolean value) {
    if (!value) {
      this.positions = null;
    }
  }

  /**
   * 
   * @see TPowerUp
   */
  public TPowerUp getType() {
    return this.type;
  }

  /**
   * 
   * @see TPowerUp
   */
  public TBall setType(TPowerUp type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been asigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * 
   * @see TPlayer
   */
  public TPlayer getPlayer() {
    return this.player;
  }

  /**
   * 
   * @see TPlayer
   */
  public TBall setPlayer(TPlayer player) {
    this.player = player;
    return this;
  }

  public void unsetPlayer() {
    this.player = null;
  }

  /** Returns true if field player is set (has been asigned a value) and false otherwise */
  public boolean isSetPlayer() {
    return this.player != null;
  }

  public void setPlayerIsSet(boolean value) {
    if (!value) {
      this.player = null;
    }
  }

  public boolean isIsShadow() {
    return this.isShadow;
  }

  public TBall setIsShadow(boolean isShadow) {
    this.isShadow = isShadow;
    setIsShadowIsSet(true);
    return this;
  }

  public void unsetIsShadow() {
    __isset_bit_vector.clear(__ISSHADOW_ISSET_ID);
  }

  /** Returns true if field isShadow is set (has been asigned a value) and false otherwise */
  public boolean isSetIsShadow() {
    return __isset_bit_vector.get(__ISSHADOW_ISSET_ID);
  }

  public void setIsShadowIsSet(boolean value) {
    __isset_bit_vector.set(__ISSHADOW_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case POSITIONS:
      if (value == null) {
        unsetPositions();
      } else {
        setPositions((List<TPosition>)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((TPowerUp)value);
      }
      break;

    case PLAYER:
      if (value == null) {
        unsetPlayer();
      } else {
        setPlayer((TPlayer)value);
      }
      break;

    case IS_SHADOW:
      if (value == null) {
        unsetIsShadow();
      } else {
        setIsShadow((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case POSITIONS:
      return getPositions();

    case TYPE:
      return getType();

    case PLAYER:
      return getPlayer();

    case IS_SHADOW:
      return new Boolean(isIsShadow());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case POSITIONS:
      return isSetPositions();
    case TYPE:
      return isSetType();
    case PLAYER:
      return isSetPlayer();
    case IS_SHADOW:
      return isSetIsShadow();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TBall)
      return this.equals((TBall)that);
    return false;
  }

  public boolean equals(TBall that) {
    if (that == null)
      return false;

    boolean this_present_positions = true && this.isSetPositions();
    boolean that_present_positions = true && that.isSetPositions();
    if (this_present_positions || that_present_positions) {
      if (!(this_present_positions && that_present_positions))
        return false;
      if (!this.positions.equals(that.positions))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_player = true && this.isSetPlayer();
    boolean that_present_player = true && that.isSetPlayer();
    if (this_present_player || that_present_player) {
      if (!(this_present_player && that_present_player))
        return false;
      if (!this.player.equals(that.player))
        return false;
    }

    boolean this_present_isShadow = true;
    boolean that_present_isShadow = true;
    if (this_present_isShadow || that_present_isShadow) {
      if (!(this_present_isShadow && that_present_isShadow))
        return false;
      if (this.isShadow != that.isShadow)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TBall other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TBall typedOther = (TBall)other;

    lastComparison = Boolean.valueOf(isSetPositions()).compareTo(typedOther.isSetPositions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositions()) {
      lastComparison = TBaseHelper.compareTo(this.positions, typedOther.positions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayer()).compareTo(typedOther.isSetPlayer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayer()) {
      lastComparison = TBaseHelper.compareTo(this.player, typedOther.player);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsShadow()).compareTo(typedOther.isSetIsShadow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsShadow()) {
      lastComparison = TBaseHelper.compareTo(this.isShadow, typedOther.isShadow);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // POSITIONS
          if (field.type == TType.LIST) {
            {
              TList _list0 = iprot.readListBegin();
              this.positions = new ArrayList<TPosition>(_list0.size);
              for (int _i1 = 0; _i1 < _list0.size; ++_i1)
              {
                TPosition _elem2;
                _elem2 = new TPosition();
                _elem2.read(iprot);
                this.positions.add(_elem2);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // TYPE
          if (field.type == TType.I32) {
            this.type = TPowerUp.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // PLAYER
          if (field.type == TType.I32) {
            this.player = TPlayer.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // IS_SHADOW
          if (field.type == TType.BOOL) {
            this.isShadow = iprot.readBool();
            setIsShadowIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.positions != null) {
      oprot.writeFieldBegin(POSITIONS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.positions.size()));
        for (TPosition _iter3 : this.positions)
        {
          _iter3.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.type != null) {
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(this.type.getValue());
      oprot.writeFieldEnd();
    }
    if (this.player != null) {
      oprot.writeFieldBegin(PLAYER_FIELD_DESC);
      oprot.writeI32(this.player.getValue());
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(IS_SHADOW_FIELD_DESC);
    oprot.writeBool(this.isShadow);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TBall(");
    boolean first = true;

    sb.append("positions:");
    if (this.positions == null) {
      sb.append("null");
    } else {
      sb.append(this.positions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("player:");
    if (this.player == null) {
      sb.append("null");
    } else {
      sb.append(this.player);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isShadow:");
    sb.append(this.isShadow);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

