/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package network;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class TSettings implements TBase<TSettings, TSettings._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("TSettings");

  private static final TField BALL_RADIUS_FIELD_DESC = new TField("ballRadius", TType.I32, (short)1);
  private static final TField ARENA_RADIUS_FIELD_DESC = new TField("arenaRadius", TType.I32, (short)2);
  private static final TField TIMER_REFRESH_FIELD_DESC = new TField("timerRefresh", TType.I32, (short)3);
  private static final TField COLOR_FIELD_DESC = new TField("color", TType.I32, (short)4);

  public int ballRadius;
  public int arenaRadius;
  public int timerRefresh;
  /**
   * 
   * @see TPlayer
   */
  public TPlayer color;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    BALL_RADIUS((short)1, "ballRadius"),
    ARENA_RADIUS((short)2, "arenaRadius"),
    TIMER_REFRESH((short)3, "timerRefresh"),
    /**
     * 
     * @see TPlayer
     */
    COLOR((short)4, "color");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BALL_RADIUS
          return BALL_RADIUS;
        case 2: // ARENA_RADIUS
          return ARENA_RADIUS;
        case 3: // TIMER_REFRESH
          return TIMER_REFRESH;
        case 4: // COLOR
          return COLOR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BALLRADIUS_ISSET_ID = 0;
  private static final int __ARENARADIUS_ISSET_ID = 1;
  private static final int __TIMERREFRESH_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BALL_RADIUS, new FieldMetaData("ballRadius", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.ARENA_RADIUS, new FieldMetaData("arenaRadius", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.TIMER_REFRESH, new FieldMetaData("timerRefresh", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.COLOR, new FieldMetaData("color", TFieldRequirementType.DEFAULT, 
        new EnumMetaData(TType.ENUM, TPlayer.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(TSettings.class, metaDataMap);
  }

  public TSettings() {
  }

  public TSettings(
    int ballRadius,
    int arenaRadius,
    int timerRefresh,
    TPlayer color)
  {
    this();
    this.ballRadius = ballRadius;
    setBallRadiusIsSet(true);
    this.arenaRadius = arenaRadius;
    setArenaRadiusIsSet(true);
    this.timerRefresh = timerRefresh;
    setTimerRefreshIsSet(true);
    this.color = color;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSettings(TSettings other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.ballRadius = other.ballRadius;
    this.arenaRadius = other.arenaRadius;
    this.timerRefresh = other.timerRefresh;
    if (other.isSetColor()) {
      this.color = other.color;
    }
  }

  public TSettings deepCopy() {
    return new TSettings(this);
  }

  @Override
  public void clear() {
    setBallRadiusIsSet(false);
    this.ballRadius = 0;
    setArenaRadiusIsSet(false);
    this.arenaRadius = 0;
    setTimerRefreshIsSet(false);
    this.timerRefresh = 0;
    this.color = null;
  }

  public int getBallRadius() {
    return this.ballRadius;
  }

  public TSettings setBallRadius(int ballRadius) {
    this.ballRadius = ballRadius;
    setBallRadiusIsSet(true);
    return this;
  }

  public void unsetBallRadius() {
    __isset_bit_vector.clear(__BALLRADIUS_ISSET_ID);
  }

  /** Returns true if field ballRadius is set (has been asigned a value) and false otherwise */
  public boolean isSetBallRadius() {
    return __isset_bit_vector.get(__BALLRADIUS_ISSET_ID);
  }

  public void setBallRadiusIsSet(boolean value) {
    __isset_bit_vector.set(__BALLRADIUS_ISSET_ID, value);
  }

  public int getArenaRadius() {
    return this.arenaRadius;
  }

  public TSettings setArenaRadius(int arenaRadius) {
    this.arenaRadius = arenaRadius;
    setArenaRadiusIsSet(true);
    return this;
  }

  public void unsetArenaRadius() {
    __isset_bit_vector.clear(__ARENARADIUS_ISSET_ID);
  }

  /** Returns true if field arenaRadius is set (has been asigned a value) and false otherwise */
  public boolean isSetArenaRadius() {
    return __isset_bit_vector.get(__ARENARADIUS_ISSET_ID);
  }

  public void setArenaRadiusIsSet(boolean value) {
    __isset_bit_vector.set(__ARENARADIUS_ISSET_ID, value);
  }

  public int getTimerRefresh() {
    return this.timerRefresh;
  }

  public TSettings setTimerRefresh(int timerRefresh) {
    this.timerRefresh = timerRefresh;
    setTimerRefreshIsSet(true);
    return this;
  }

  public void unsetTimerRefresh() {
    __isset_bit_vector.clear(__TIMERREFRESH_ISSET_ID);
  }

  /** Returns true if field timerRefresh is set (has been asigned a value) and false otherwise */
  public boolean isSetTimerRefresh() {
    return __isset_bit_vector.get(__TIMERREFRESH_ISSET_ID);
  }

  public void setTimerRefreshIsSet(boolean value) {
    __isset_bit_vector.set(__TIMERREFRESH_ISSET_ID, value);
  }

  /**
   * 
   * @see TPlayer
   */
  public TPlayer getColor() {
    return this.color;
  }

  /**
   * 
   * @see TPlayer
   */
  public TSettings setColor(TPlayer color) {
    this.color = color;
    return this;
  }

  public void unsetColor() {
    this.color = null;
  }

  /** Returns true if field color is set (has been asigned a value) and false otherwise */
  public boolean isSetColor() {
    return this.color != null;
  }

  public void setColorIsSet(boolean value) {
    if (!value) {
      this.color = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BALL_RADIUS:
      if (value == null) {
        unsetBallRadius();
      } else {
        setBallRadius((Integer)value);
      }
      break;

    case ARENA_RADIUS:
      if (value == null) {
        unsetArenaRadius();
      } else {
        setArenaRadius((Integer)value);
      }
      break;

    case TIMER_REFRESH:
      if (value == null) {
        unsetTimerRefresh();
      } else {
        setTimerRefresh((Integer)value);
      }
      break;

    case COLOR:
      if (value == null) {
        unsetColor();
      } else {
        setColor((TPlayer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BALL_RADIUS:
      return new Integer(getBallRadius());

    case ARENA_RADIUS:
      return new Integer(getArenaRadius());

    case TIMER_REFRESH:
      return new Integer(getTimerRefresh());

    case COLOR:
      return getColor();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BALL_RADIUS:
      return isSetBallRadius();
    case ARENA_RADIUS:
      return isSetArenaRadius();
    case TIMER_REFRESH:
      return isSetTimerRefresh();
    case COLOR:
      return isSetColor();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TSettings)
      return this.equals((TSettings)that);
    return false;
  }

  public boolean equals(TSettings that) {
    if (that == null)
      return false;

    boolean this_present_ballRadius = true;
    boolean that_present_ballRadius = true;
    if (this_present_ballRadius || that_present_ballRadius) {
      if (!(this_present_ballRadius && that_present_ballRadius))
        return false;
      if (this.ballRadius != that.ballRadius)
        return false;
    }

    boolean this_present_arenaRadius = true;
    boolean that_present_arenaRadius = true;
    if (this_present_arenaRadius || that_present_arenaRadius) {
      if (!(this_present_arenaRadius && that_present_arenaRadius))
        return false;
      if (this.arenaRadius != that.arenaRadius)
        return false;
    }

    boolean this_present_timerRefresh = true;
    boolean that_present_timerRefresh = true;
    if (this_present_timerRefresh || that_present_timerRefresh) {
      if (!(this_present_timerRefresh && that_present_timerRefresh))
        return false;
      if (this.timerRefresh != that.timerRefresh)
        return false;
    }

    boolean this_present_color = true && this.isSetColor();
    boolean that_present_color = true && that.isSetColor();
    if (this_present_color || that_present_color) {
      if (!(this_present_color && that_present_color))
        return false;
      if (!this.color.equals(that.color))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TSettings other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TSettings typedOther = (TSettings)other;

    lastComparison = Boolean.valueOf(isSetBallRadius()).compareTo(typedOther.isSetBallRadius());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBallRadius()) {
      lastComparison = TBaseHelper.compareTo(this.ballRadius, typedOther.ballRadius);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArenaRadius()).compareTo(typedOther.isSetArenaRadius());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArenaRadius()) {
      lastComparison = TBaseHelper.compareTo(this.arenaRadius, typedOther.arenaRadius);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimerRefresh()).compareTo(typedOther.isSetTimerRefresh());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimerRefresh()) {
      lastComparison = TBaseHelper.compareTo(this.timerRefresh, typedOther.timerRefresh);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColor()).compareTo(typedOther.isSetColor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColor()) {
      lastComparison = TBaseHelper.compareTo(this.color, typedOther.color);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // BALL_RADIUS
          if (field.type == TType.I32) {
            this.ballRadius = iprot.readI32();
            setBallRadiusIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // ARENA_RADIUS
          if (field.type == TType.I32) {
            this.arenaRadius = iprot.readI32();
            setArenaRadiusIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // TIMER_REFRESH
          if (field.type == TType.I32) {
            this.timerRefresh = iprot.readI32();
            setTimerRefreshIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // COLOR
          if (field.type == TType.I32) {
            this.color = TPlayer.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(BALL_RADIUS_FIELD_DESC);
    oprot.writeI32(this.ballRadius);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(ARENA_RADIUS_FIELD_DESC);
    oprot.writeI32(this.arenaRadius);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TIMER_REFRESH_FIELD_DESC);
    oprot.writeI32(this.timerRefresh);
    oprot.writeFieldEnd();
    if (this.color != null) {
      oprot.writeFieldBegin(COLOR_FIELD_DESC);
      oprot.writeI32(this.color.getValue());
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TSettings(");
    boolean first = true;

    sb.append("ballRadius:");
    sb.append(this.ballRadius);
    first = false;
    if (!first) sb.append(", ");
    sb.append("arenaRadius:");
    sb.append(this.arenaRadius);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timerRefresh:");
    sb.append(this.timerRefresh);
    first = false;
    if (!first) sb.append(", ");
    sb.append("color:");
    if (this.color == null) {
      sb.append("null");
    } else {
      sb.append(this.color);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

